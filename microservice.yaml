apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-provisioner-${env_name}
spec:
  minReadySeconds: 30
  progressDeadlineSeconds: 120
  replicas: 1
  selector:
    matchLabels:
      app: zerofiltretech-provisioner-${env_name}
  template:
    metadata:
      labels:
        app: zerofiltretech-provisioner-${env_name}
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "internal-app"
        vault.hashicorp.com/agent-inject-secret-config: "${env_name}/data/zerofiltre-provisioner"
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "${env_name}/data/zerofiltre-provisioner" -}}
            VERIFICATION_TOKEN="{{ .Data.data.VERIFICATION_TOKEN}}"
            KEYCLOAK_BASE_URL="{{ .Data.data.KEYCLOAK_BASE_URL }}"
            KEYCLOAK_REALM="{{ .Data.data.KEYCLOAK_REALM }}"
            KEYCLOAK_CLIENT_ID="{{ .Data.data.KEYCLOAK_CLIENT_ID }}"
            KEYCLOAK_CLIENT_SECRET="{{ .Data.data.KEYCLOAK_CLIENT_SECRET }}"
            GRAFANA_PASSWORD="{{ .Data.data.GRAFANA_PASSWORD }}"
            GRAFANA_USER="{{ .Data.data.GRAFANA_USER }}"
            KUBE_CONFIG={{ .Data.data.KUBE_CONFIG }}
          {{- end -}}
    spec:
      serviceAccountName: internal-app
      containers:
        - name: zerofiltretech-provisioner-${env_name}
          image: imzerofiltre/zerofiltretech-provisioner:0.0.1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: ${requests_cpu}
              memory: ${requests_memory}
            limits:
              cpu: ${limits_cpu}
              memory: ${limits_memory}
          ports:
            - containerPort: 5000
          
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 100000
            periodSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-provisioner-${env_name}
spec:
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  selector:
    app: zerofiltretech-provisioner-${env_name}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-provisioner-${env_name}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # add an annotation indicating the issuer to use.
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: ${domain_name}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: zerofiltretech-provisioner-${env_name}
                port:
                  number: 5000
  tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
        - ${domain_name}
      secretName: provisioner-zerofiltre-ingress-cert # < cert-manager will store the created certificate in this secret.
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: reset-namespaces
  namespace: zerofiltretech-${env_name}
spec:
  schedule: "0 0 1 * *"  # Run at midnight on the first day of every month
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/role: "internal-app"
            vault.hashicorp.com/agent-inject-secret-config: "${env_name}/data/zerofiltre-provisioner"
            vault.hashicorp.com/agent-inject-template-config: |
              {{- with secret "${env_name}/data/zerofiltre-provisioner" -}}
                export VERIFICATION_TOKEN="{{ .Data.data.VERIFICATION_TOKEN}}"
              {{- end -}}
        spec:
          serviceAccountName: internal-app
          containers:
          - name: reset-namespaces
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              source /vault/secrets/config
              . /vault/secrets/config
              curl -X POST -H "Authorization: \$VERIFICATION_TOKEN" -H "Content-Type: application/json" http://zerofiltretech-provisioner-${env_name}.zerofiltretech-${env_name}.svc.cluster.local:5000/reset
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-old-users
  namespace: zerofiltretech-${env_name}
spec:
  schedule: "0 0 * * *"  # Run at midnight every day
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/role: "internal-app"
            vault.hashicorp.com/agent-inject-secret-config: "${env_name}/data/zerofiltre-provisioner"
            vault.hashicorp.com/agent-inject-template-config: |
              {{- with secret "${env_name}/data/zerofiltre-provisioner" -}}
                export VERIFICATION_TOKEN="{{ .Data.data.VERIFICATION_TOKEN}}"
              {{- end -}}
        spec:
          serviceAccountName: internal-app
          containers:
          - name: cleanup-old-users
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              source /vault/secrets/config
              . /vault/secrets/config
              curl -X POST -H "Authorization: \$VERIFICATION_TOKEN" -H "Content-Type: application/json" http://zerofiltretech-provisioner-${env_name}.zerofiltretech-${env_name}.svc.cluster.local:5000/cleanup
          restartPolicy: OnFailure 